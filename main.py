import numpy as npimport matplotlib.pyplot as pltimport datetimeimport simple_digital_filters as sdfpktnr, gyrox, gyroy, gyroz, accx, accy, accz = np.loadtxt('imu_sample_data_outdoor.csv', delimiter=",", skiprows=1,                                                          usecols=range(7), unpack=True)G = 9.81freq = 256.0  # frequency of the sensorperiod = 1.0 / freq  # time for single measurement, 0.04 sstart_time = datetime.datetime.strptime("2021-11-17 10:00:00", "%Y-%m-%d %H:%M:%S")timestamps = [start_time + datetime.timedelta(seconds=x * period) for x in range(len(pktnr))]# time window boundariesoffset_start_time = datetime.datetime.strptime("2021-11-17 10:05:00", "%Y-%m-%d %H:%M:%S")offset_stop_time = datetime.datetime.strptime("2021-11-17 10:05:05", "%Y-%m-%d %H:%M:%S")start_index = [i for i, t in enumerate(timestamps) if (t - offset_start_time).total_seconds() > 0.0][0]stop_index = [i for i, t in enumerate(timestamps) if (t - offset_stop_time).total_seconds() > 0.0][0]fig, ((ax1, ax2),(ax3, ax4),(ax5, ax6)) = plt.subplots(3,2)fig.canvas.set_window_title("Simple Digital Filters")fig.suptitle("Accelerometer Z-Axes")sample_data = accz[start_index:stop_index] * G  # from 10:05:00 till 10:05:05sample_data_factorize = sdf.factorize(sample_data, 10)ax1.set_title("Factorize y(i) = k * x(i), k=3")ax1.plot(sample_data, color="#000000", label="sample data")ax1.plot(sample_data_factorize, color="#FF0000", label="filtered data")sample_data = accz[start_index:stop_index] * G  # from 10:05:00 till 10:05:05sample_data_factorize = sdf.diff(sample_data)ax2.set_title("Difference y(i) = x(i) - x(i-1)")ax2.plot(sample_data, color="#000000", label="sample data")ax2.plot(sample_data_factorize, color="#FF0000", label="filtered data")sample_data = accz[start_index:stop_index] * G  # from 10:05:00 till 10:05:05sample_data_factorize = sdf.left_shift(sample_data, offset=50)ax3.set_title("Left Shift y(i) = x(i+k), k=50")ax3.plot(sample_data, color="#000000", label="sample data")ax3.plot(sample_data_factorize, color="#FF0000", label="filtered data")sample_data = accz[start_index:stop_index] * G  # from 10:05:00 till 10:05:05sample_data_factorize = sdf.right_shift(sample_data, offset=50)ax4.set_title("Right Shift y(i) = x(i+k), k=50")ax4.plot(sample_data, color="#000000", label="sample data")ax4.plot(sample_data_factorize, color="#FF0000", label="filtered data")sample_data = accz[start_index:stop_index] * G  # from 10:05:00 till 10:05:05sample_data_factorize = sdf.reverse(sample_data)ax5.set_title("Reverse y(i) = y(i-1) + 0.5*(x(i) - x(i-2)")ax5.plot(sample_data, color="#000000", label="sample data")ax5.plot(sample_data_factorize, color="#FF0000", label="filtered data")sample_data = accz[start_index:stop_index] * G  # from 10:05:00 till 10:05:05sample_data_factorize = sdf.smooth(sample_data, window_len=11, window='hanning')ax6.set_title("Moving Average(window = 20)")ax6.plot(sample_data, color="#000000", label="sample data")ax6.plot(sample_data_factorize, color="#FF0000", label="filtered data")ax1.grid()ax1.legend()ax1.set(xlabel="measurement number")ax1.set(ylabel="m/s^2")ax2.grid()ax2.legend()ax2.set(xlabel="measurement number", ylabel="m/s^2")ax3.grid()ax3.legend()ax3.set(xlabel="measurement number")ax3.set(ylabel="m/s^2")ax4.grid()ax4.legend()ax4.set(xlabel="measurement number")ax4.set(ylabel="m/s^2")ax5.grid()ax5.legend()ax5.set(xlabel="measurement number")ax5.set(ylabel="m/s^2")ax6.grid()ax6.legend()ax6.set(xlabel="measurement number")ax6.set(ylabel="m/s^2")plt.show()